/**
 * By: William
 */

import java.io.*;
import javax.swing.*;

public class GUI extends javax.swing.JFrame {
    
    Car myCar = new Car();
    int[] mpgList;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        makeList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        modelList = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        labelMPG = new javax.swing.JLabel();
        tripField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        galText = new javax.swing.JLabel();
        costField = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        reset = new javax.swing.JMenu();
        javax.swing.JMenu exit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TripPlanner");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Make:");

        makeList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        makeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select A Make", "Nissan", "Toyota", "Mercedes-Benz" }));
        makeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    makeListActionPerformed(evt);
                }
                catch(IOException ex){
                    
                }
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Model:");

        modelList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        modelList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelListActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("MPG");

        labelMPG.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Trip:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("mi");

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Gas:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Cost:");

        galText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        costField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        reset.setText("Reset");
        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetMouseClicked(evt);
            }
        });
        jMenuBar2.add(reset);

        exit.setText("Exit");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        jMenuBar2.add(exit);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modelList, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(makeList, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(tripField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelMPG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(galText)
                    .addComponent(costField))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(makeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(modelList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(labelMPG))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tripField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(galText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(costField))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static void printArray(String[] make, int[] mpg){
        for(int i = 0; i < make.length; i++){
            System.out.println(make[i] + ", " + mpg[i]);
        }
    }
    
    private void makeListActionPerformed(java.awt.event.ActionEvent evt) throws IOException, FileNotFoundException{//GEN-FIRST:event_makeListActionPerformed
        int index = makeList.getSelectedIndex();
        if(index != 0 && index != -1){
            String make = String.valueOf(makeList.getItemAt(index)).toLowerCase();
            try{
                String models[] = getModels(make);
                mpgList = getMPG(models);
                setModels(models);                
                galText.setText("");
                costField.setText("");
            }
            catch(IOException ex){
                System.out.println("Error Reading File");
            }
        }
        else{
            String[] none = {};
            modelList.setModel(new DefaultComboBoxModel(none));            
            galText.setText("");
            costField.setText("");
        }
    }//GEN-LAST:event_makeListActionPerformed

    private void modelListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelListActionPerformed
        if(modelList.getSelectedIndex() != 0){
            myCar.mpg = getMPG();
            galText.setText("");
            costField.setText("");
        }
        else{
            labelMPG.setText("");
            galText.setText("");
            costField.setText("");
        }
    }//GEN-LAST:event_modelListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            int trip = Integer.parseInt(tripField.getText());
            double gal = trip/(double)myCar.mpg;
            galText.setText(gal + " Gallons");
            double cost = gal * 2.809;
            String price = String.valueOf(cost);
            if((price.substring(price.indexOf("."), price.length())).length() == 2){
                price = price + "0";
                costField.setText("$" + price);
            }
            if((price.substring(price.indexOf("."),price.length())).length() > 2){
                price = price.substring(0, price.indexOf(".") + 3);
            }
            costField.setText("$" + price);
        }
        catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Please Enter a Valid Distance", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        if(makeList.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "Please choose a Make", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        if(modelList.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "Please choose a Model", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetMouseClicked
        makeList.setSelectedIndex(0);
        tripField.setText("");
        galText.setText("");
        costField.setText("");
    }//GEN-LAST:event_resetMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked
    
    /**
     * This method gets all the models for the selected make from the right file.
     * @param make The make that you want all the models of.
     * @return an String array of all the models with mpg.
     */
    public String[] getModels(String make)throws IOException, FileNotFoundException{
        
        myCar.make = make; //Sets the make of the myCar Car object to the selected Make.
        String dir = System.getProperty("user.dir") + "\\src\\makes\\"; //This line finds the directory of the program. Changes depending on where it is located.
        String file = dir + make + ".txt"; //This line finds the location of the car make file based on the directory the file is located in.
        
        //This BufferedReader goes through the specified make file once to find out how big the make list array needs to be
        BufferedReader read = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
        String index;
        int i = 0;
        while((index = read.readLine()) != null){
            i++;
        }
        read.close();
        //This BufferedReader goes through the specified make file and populates the models array with the models of that certain make. 
        BufferedReader readAgain = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
        String[] models = new String[i];
        String line;
        i = 0;
        while((line = readAgain.readLine()) != null){
            models[i] = line;
            i++;
        }
        readAgain.close();
        return models;
    }
    
    /**
     * This method takes a string of models with their mpg and returns an int[] of mpgs.
     * @param models The array of models with there mpg's attached.
     * @return an array of ints that represents the mpg's.
     */
    public int[] getMPG(String[] models){
        int[] mpg = new int[models.length];
        for(int i = 0; i < models.length; i++){
            int MPG = Integer.parseInt(models[i].substring(models[i].indexOf(":") + 1, models[i].length()));
            mpg[i] = MPG;
        }
        return mpg;
    }
    
    public int getMPG(){
        int modelIndex = modelList.getSelectedIndex();
        int MPG = mpgList[modelIndex];
        labelMPG.setText(String.valueOf(MPG));
        return MPG;
    }
    
    /**
     * This method sets the models combo box to the models.
     * @param models the array of the models.
     */
    public void setModels(String[] models){
        formatModel(models);
        DefaultComboBoxModel model = new DefaultComboBoxModel(models);
        modelList.setModel(model);
    }
    
    /**
     * Takes an array of the models with the mpg and gets rid of the mpg part.
     * @param models
     * @return the models without mpg.
     */
    public String[] formatModel(String[] models){
        String[] newModels = new String[models.length];
        for(int i = 0; i < models.length; i++){
            String index = models[i];
            String model = index.substring(0, index.indexOf(":"));
            models[i] = model;
        }
        return newModels;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, FileNotFoundException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });      
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel costField;
    private javax.swing.JLabel galText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JLabel labelMPG;
    private javax.swing.JComboBox makeList;
    private javax.swing.JComboBox modelList;
    private javax.swing.JMenu reset;
    private javax.swing.JTextField tripField;
    // End of variables declaration//GEN-END:variables
}
